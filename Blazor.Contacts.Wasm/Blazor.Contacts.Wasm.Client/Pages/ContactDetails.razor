@page "/contactdetails"
@page "/contactdetails/{Id:int}"

@using Blazor.Contacts.Wasm.Shared
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@inject IContactService ContactService
@inject NavigationManager NavigationManager

@if(contact == null)
{
    <p>Loading...</p>
}
else{

<div style="max-width: 400px;">
    <MudCard>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="FirstName" Required="true" RequiredError="First Name is required!" @bind-Value="@contact.FirstName" />
                <MudTextField T="string" Label="LastName" Required="true" RequiredError="Last Name is required!" @bind-Value="@contact.LastName" />
                <MudTextField T="string" Label="Address" Required="false" @bind-Value="@contact.Address" />
                <MudTextField T="string" Label="Phone" Required="false" @bind-Value="@contact.Phone" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!"/>
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                        <MudRadio Option="@("Personal")">Personal</MudRadio>
                        <MudRadio Option="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                             Label="I agree that MudBlazor is awesome!"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" 
                        Color="Color.Primary" 
                        Disabled="@(!success)" 
                        Class="ml-auto"
                        OnClick="@(()=>Save())">Register</MudButton>
        </MudCardActions>
    </MudCard>
    
    <MudPaper Class="pa-4 justify-center my-4 mud-text-align-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>Save())">Validate</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
    </MudPaper>

    <MudExpansionPanels>
        <MudExpansionPanel Text="@($"Show Errors ({errors.Length})")">
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

}



@code{
    [Parameter]
    public int Id { get; set; }


    public Contact contact;

        protected async override Task OnInitializedAsync()
        {
            contact = new Contact();
            if(Id>0)
                contact = await ContactService.GetDetails(Id);
        }

        protected async Task Save()
        {
            await ContactService.SaveContact(contact);
            NavigationManager.NavigateTo("./contactlist");
        }
///TODO: Codigo mejorar
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    ///TODO: Agregar Elevation
    ///TODO: Agregar Eliminar/Deshabilitar
    ///TODO: Centrar el texto
}
